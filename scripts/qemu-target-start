#!/bin/bash
#
# qemu-target-start - start a QEMU VM with images generated by Buildroot.
#
# Copyright (c) 2014 Eric Le Bihan <eric.le.bihan.dev@free.fr>
#
# This project is released under the MIT/X11 license.
#

#
# This program starts a QEMU virtual machine with a kernel and a root file
# system generated by Buildroot. The available images should be listed in a
# configuration file, where each line is formatted as follow:
#
#   arch koptions directory comment
#
# If no kernel options are needed, set koptions to 'x'.
#
# The default configuration file is $HOME/.config/qemo-target-start.conf
#

__VERSION__=0.4.0

CONFIG_FILE=$HOME/.config/qemu-target-start.conf
IMAGE_DIR="${HOME}/build"
DUMMY_USB_DISK="${HOME}/Data/QEMU/Tests/dummy-usb-disk.img"
QEMU_SYSTEM_X86="qemu-system-i386 --enable-kvm"
QEMU_SYSTEM_ARM="qemu-system-arm -m 256"
LINUX_CONSOLE=
LINUX_VIDEO="video=vesa vga=788"
LINUX_OPTS=
QEMU_OPTS_NO_GFX=
QEMU_OPTS_USB=
QEMU_OPTS=
QEMU_OPTS_USB_DISK=" \
    -drive id=my_usb_disk,file=${DUMMY_USB_DISK},if=none \
    -usb \
    -device usb-storage,drive=my_usb_disk"

USE_USB_DISK=YES
VDE_SOCKET="/var/run/vde2/tap0.ctl"

usage() {
    cat << EOF
Usage: $(basename $0) [OPTIONS] <ARCH> <TOPIC>

Options:

  -c FILE:    set path to configuration file
  -k COMMAND: set kernel command line
  -i DIR:     set image path to DIR
  -n:         do not start graphical interface
  -u VID:PID  attach USB device specified by its VID and PID

  -D          dot no use dummy USB disk
EOF
}

start_qemu_x86() {
    echo $2
    test -n "${QEMU_OPTS_NO_GFX}" && LINUX_CONSOLE="console=ttyS0"
    ${QEMU_SYSTEM_X86} \
    ${QEMU_OPTS} \
    -soundhw hda\
    -vga std \
    -net nic,model=rtl8139,macaddr=52:54:00:11:22:33 \
    -net vde,sock=${VDE_SOCKET} \
    -kernel ${IMAGE_DIR}/$1/x86/images/bzImage \
    -append "${LINUX_CONSOLE} ${LINUX_VIDEO} ${LINUX_OPTS} root=/dev/sda rw" \
    -hda ${IMAGE_DIR}/$1/x86/images/rootfs.ext2 \
    -device piix3-usb-uhci
}

start_qemu_arm() {
    echo $2
    test -n "${QEMU_OPTS_NO_GFX}" && LINUX_CONSOLE="console=ttyAMA0"
    ${QEMU_SYSTEM_ARM} -M versatilepb \
    ${QEMU_OPTS} \
    -net nic,macaddr=52:54:00:11:22:33 \
    -net vde,sock=${VDE_SOCKET} \
    -kernel ${IMAGE_DIR}/$1/arm/images/zImage \
    -append "${LINUX_CONSOLE} ${LINUX_OPTS} root=/dev/sda rw" \
    -drive file=${IMAGE_DIR}/$1/arm/images/rootfs.ext2,if=scsi
}

while getopts "hvc:k:i:nu:D" option; do
    case $option in
        h)
            usage; exit 0
            ;;
        c)
            CONFIG_FILE=${OPTARG}
            ;;
        k)
            LINUX_OPTS=${OPTARG}
            ;;
        i)
            IMAGE_DIR=${OPTARG}
            ;;
        n)
            QEMU_OPTS_NO_GFX="-nographic"
            ;;
        u)
            QEMU_OPTS_USB="${QEMU_OPTS_USB} -usbdevice host:${OPTARG}"
            ;;
        v)
            echo ${__VERSION__}; exit 0
            ;;
        D)
            USE_USB_DISK=NO
            ;;
        *)
            echo "Unknown option" >&2; exit 2
            ;;
    esac
done

shift $((${OPTIND} - 1))

if [ $# -ne 2 ]; then
    usage
    exit 2
fi

if [ -n "${QEMU_OPTS_NO_GFX}" ]; then
    QEMU_OPTS="${QEMU_OPTS} ${QEMU_OPTS_NO_GFX}"
else
    QEMU_OPTS="${QEMU_OPTS} -serial stdio"
fi

if [ -n "${QEMU_OPTS_USB}" ]; then
    QEMU_OPTS="${QEMU_OPTS} ${QEMU_OPTS_USB}"
fi

if [ "$USE_USB_DISK" = "YES" ]; then
    QEMU_OPTS="${QEMU_OPTS} ${QEMU_OPTS_USB_DISK}"
fi

COMMAND=
while read arch options directory comment; do
    if [ "$1" = "${arch}" -a "$2" = "${directory}" ]; then
        COMMAND="start_qemu_${arch} ${directory}"
        COMMENT="Starting ${comment}..."
        if [ "${options}" != "x" ]; then
            LINUX_OPTS="${LINUX_OPTS} ${options}"
        fi
    fi
done < ${CONFIG_FILE}

if [ -z "${COMMAND}" ]; then
    echo "Error: configuration not found." 2>&1
    exit 3
fi

echo ${COMMENT}
eval ${COMMAND}

# vim: ts=4 sts=4 sw=4 et ai
